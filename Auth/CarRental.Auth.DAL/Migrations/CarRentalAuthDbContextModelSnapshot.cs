// <auto-generated />
using System;
using CarRental.Auth.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Auth.DAL.Migrations
{
    [DbContext(typeof(CarRentalAuthDbContext))]
    partial class CarRentalAuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac8c1ccb-871e-4802-b998-08e4a5d7f933"),
                            Name = "None"
                        },
                        new
                        {
                            Id = new Guid("dce04e14-aac2-4fbf-b3f5-38bbfc05718a"),
                            Name = "ReadOnly"
                        },
                        new
                        {
                            Id = new Guid("4a47bab0-da9f-465f-b2ce-95abefab4371"),
                            Name = "ReadWrite"
                        });
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.RolePermissionsEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("529e960f-79c9-4e25-b3ef-a5ce8cbb42bc"),
                            PermissionId = new Guid("4a47bab0-da9f-465f-b2ce-95abefab4371")
                        },
                        new
                        {
                            RoleId = new Guid("765f9e20-fb70-4837-8b22-5d280ad9d2d2"),
                            PermissionId = new Guid("ac8c1ccb-871e-4802-b998-08e4a5d7f933")
                        },
                        new
                        {
                            RoleId = new Guid("765f9e20-fb70-4837-8b22-5d280ad9d2d2"),
                            PermissionId = new Guid("dce04e14-aac2-4fbf-b3f5-38bbfc05718a")
                        },
                        new
                        {
                            RoleId = new Guid("7350e0d2-2a91-42ce-bfe8-d882eff2ce3d"),
                            PermissionId = new Guid("dce04e14-aac2-4fbf-b3f5-38bbfc05718a")
                        },
                        new
                        {
                            RoleId = new Guid("6894d1ff-f40c-418e-b560-f6670e8b1e4e"),
                            PermissionId = new Guid("ac8c1ccb-871e-4802-b998-08e4a5d7f933")
                        });
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.RolesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("529e960f-79c9-4e25-b3ef-a5ce8cbb42bc"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("765f9e20-fb70-4837-8b22-5d280ad9d2d2"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("7350e0d2-2a91-42ce-bfe8-d882eff2ce3d"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("6894d1ff-f40c-418e-b560-f6670e8b1e4e"),
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac100f97-6db1-42ba-b3ad-a0881b167e50"),
                            Address = "123 Admin Street",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Adminov",
                            Name = "admin",
                            PasswordHash = new byte[] { 183, 37, 153, 86, 122, 13, 165, 152, 199, 114, 118, 112, 168, 181, 113, 252, 0, 43, 136, 49, 42, 85, 145, 58, 158, 175, 139, 251, 112, 229, 20, 28 },
                            PasswordSalt = new byte[] { 2, 236, 93, 133, 227, 180, 250, 105, 10, 126, 192, 88, 38, 197, 17, 207, 33, 86, 87, 148, 40, 18, 88, 124, 67, 236, 44, 55, 57, 176, 246, 215, 192, 82, 33, 195, 104, 26, 207, 196, 88, 196, 59, 94, 52, 18, 88, 119, 29, 184, 91, 54, 18, 244, 209, 215, 161, 185, 173, 109, 90, 65, 147, 120 },
                            PhoneNumber = "1234567890",
                            RefreshToken = "",
                            TokenCreated = new DateTime(2024, 6, 23, 9, 27, 57, 893, DateTimeKind.Utc).AddTicks(3556),
                            TokenExpires = new DateTime(2024, 6, 24, 9, 27, 57, 893, DateTimeKind.Utc).AddTicks(3566)
                        },
                        new
                        {
                            Id = new Guid("3877311a-f26e-4913-b28c-79fb64dc92d9"),
                            Address = "456 User Lane",
                            Email = "a7x.otto@gmail.com",
                            FirstName = "Regular",
                            LastName = "User",
                            Name = "user",
                            PasswordHash = new byte[] { 139, 155, 144, 13, 123, 180, 160, 98, 71, 169, 235, 146, 178, 157, 35, 65, 84, 220, 59, 244, 154, 207, 76, 23, 166, 205, 196, 159, 7, 41, 28, 81 },
                            PasswordSalt = new byte[] { 19, 25, 122, 208, 169, 250, 199, 184, 179, 59, 220, 78, 161, 31, 115, 91, 121, 6, 137, 150, 93, 141, 163, 194, 18, 196, 169, 117, 249, 66, 4, 220, 27, 20, 68, 75, 184, 188, 44, 61, 119, 198, 66, 29, 48, 9, 160, 234, 33, 224, 165, 72, 71, 37, 91, 149, 23, 87, 126, 175, 213, 142, 81, 97 },
                            PhoneNumber = "0987654321",
                            RefreshToken = "",
                            TokenCreated = new DateTime(2024, 6, 23, 9, 27, 57, 893, DateTimeKind.Utc).AddTicks(3571),
                            TokenExpires = new DateTime(2024, 6, 24, 9, 27, 57, 893, DateTimeKind.Utc).AddTicks(3574)
                        });
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.UserPermissionsEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ac100f97-6db1-42ba-b3ad-a0881b167e50"),
                            PermissionId = new Guid("4a47bab0-da9f-465f-b2ce-95abefab4371")
                        },
                        new
                        {
                            UserId = new Guid("3877311a-f26e-4913-b28c-79fb64dc92d9"),
                            PermissionId = new Guid("dce04e14-aac2-4fbf-b3f5-38bbfc05718a")
                        });
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.UserRolesEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ac100f97-6db1-42ba-b3ad-a0881b167e50"),
                            RoleId = new Guid("529e960f-79c9-4e25-b3ef-a5ce8cbb42bc")
                        },
                        new
                        {
                            UserId = new Guid("3877311a-f26e-4913-b28c-79fb64dc92d9"),
                            RoleId = new Guid("7350e0d2-2a91-42ce-bfe8-d882eff2ce3d")
                        });
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.RolePermissionsEntity", b =>
                {
                    b.HasOne("CarRental.Auth.DAL.Context.Entities.PermissionEntity", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRental.Auth.DAL.Context.Entities.RolesEntity", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.UserPermissionsEntity", b =>
                {
                    b.HasOne("CarRental.Auth.DAL.Context.Entities.PermissionEntity", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Auth.DAL.Context.Entities.UserEntity", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.UserRolesEntity", b =>
                {
                    b.HasOne("CarRental.Auth.DAL.Context.Entities.RolesEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Auth.DAL.Context.Entities.UserEntity", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.PermissionEntity", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.RolesEntity", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CarRental.Auth.DAL.Context.Entities.UserEntity", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
